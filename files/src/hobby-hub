#!/bin/bash

## Author: Draven Schilling
## Publication Date: 1-25-21
## Rev: 0.1
## Description: Provides interfacing commands for the user that manipulate the running programs 


## OPTIONS PROVIDED ##
## 0 = not provided ##
##   1 = provided   ##
##     2 = error    ##

HELP=0

RESTART=0
STOP=0
PAUSE=0
CONTINUE=0

LIST=0
TRANSFER=0
TRANSFER_FILE=""
DEBUG=0
DEBUG_FILE=""
REMOVE=0
REMOVE_FILE=""


OTHER_ARGUMENTS=()

# Loop through arguments and process them
for arg in "$@"
do
    case $arg in
        -h|--help) # Display Help Menu
        HELP=1
        shift # Remove from processing
        ;;
        -r|--restart) # Restart Running processes
        RESTART=1
        shift # Remove from processing
        ;;
        -s|--stop) # Stop Running processes
        STOP=1
        shift # Remove from processing
        ;;
        -p|--pause) # Pause Running processes
        PAUSE=1
        shift # Remove from processing
        ;;
        -c|--continue) # Resume Running processes
        CONTINUE=1
        echo byebye
        shift # Remove from processing
        ;;
        -l|--list) # List Running processes
        LIST=1
        shift # Remove from processing
        ;;
        -t|--transfer) # move file to running processes
            if [ -z "$2" ]
            then
                TRANSFER=2
                shift # Remove argument name from processing
            else
                TRANSFER_FILE="$2"
                if [ -f $TRANSFER_FILE ]
                then
                    TRANSFER=1
                else
                    TRANSFER=2
                fi
                shift # Remove argument name from processing
                shift # Remove argument value from processing
            fi
        ;;
        -z|--remove) # Remove program
        if [ -z "$2" ]
            then
                REMOVE=2
                echo nope
                shift # Remove argument name from processing
            else
                
                REMOVE_FILE="$2"
                if [ -f $REMOVE_FILE ]
                then
                    REMOVE=1
                else
                    REMOVE=2
                fi
                shift # Remove argument name from processing
                shift # Remove argument value from processing
            fi
        ;;
        -d|--debug) # Debug provided program
            if [ -z "$2" ]
            then
                DEBUG=2
                shift # Remove argument name from processing
            else
                DEBUG_FILE="$2"
                if [ -f $DEBUG_FILE ]
                then
                    DEBUG=1
                else
                    DEBUG=2
                fi
                shift # Remove argument name from processing
                shift # Remove argument value from processing
            fi
        ;;
        *)
        OTHER_ARGUMENTS+=("$1")
        shift # Remove generic argument from processing
        ;;
    esac

    break # don't allow more than one argument. for the time being...

done

#---------------------------------------------------------------------------------------------------------#


if [ $HELP -eq 1 ]
then
    echo options:
    echo "[-h|--help]                     usage instructions. Help output."
    echo "[-r|--restart]                  restarts the currently running programs."
    echo "[-s|--stop]                     kills the currently running programs. "
    echo "[-p|--pause]                    pauses the currently running programs."
    echo "[-c|--continue]                 resumes currently paused programs."
    echo "[-l|--list]                     lists currently running programs."
    echo "[-t|--transfer] program_file    transfers program to staging directory."
    echo "[-d|--debug] program_file       temporarly runs provided program file."
    echo "[-z|--remove] program_file      stop and remove provided program."
else
    if [ $LIST -eq 1 ]
    then
        PROGRAM_DIR="/etc/hobby-hub/out/running_programs.txt"
        while read -r line
        do
            IFS=' '
            read -a strarr <<< "$line"
            for word in "${strarr[@]}";
                do
                if [ $word]
                #printf "$word\n"
            done
            #echo "$line"
        done < "$PROGRAM_DIR"
    fi
fi